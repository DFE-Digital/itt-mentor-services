name: Backup Database to Azure Storage
concurrency: build_and_deploy_main

on:
  workflow_dispatch:
    inputs:
      environment:
        description: Environment to backup
        required: true
        default: staging
        type: choice
        options:
        - 'staging'
        - 'production'
      overwriteThisMorningsBackup:
        required: true
        type: boolean
        default: false
      PTRdatabase:
        description: Are you backing up a PTR database copy
        required: false
        type: boolean
        default: false
  schedule: # 03:00 UTC
    - cron: '0 3 * * *'

env:
  SERVICE_NAME: itt-mentor-services
  SERVICE_SHORT: ittms
  TF_VARS_PATH: terraform/application/config

jobs:
  backup:
    name: Backup AKS Database
    if: ${{ github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.event.inputs.overwriteThisMorningsBackup == 'true') }}
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment || 'production' }}
    env:
      DEPLOY_ENV: ${{ inputs.environment || 'production'  }}

    steps:
    - uses: actions/checkout@v4
      name: Checkout

    - name: Set environment variables
      run: |
        source global_config/${{ env.DEPLOY_ENV }}.sh
        tf_vars_file=${{ env.TF_VARS_PATH }}/${{ env.DEPLOY_ENV }}.tfvars.json
        echo "CLUSTER=$(jq -r '.cluster' ${tf_vars_file})" >> $GITHUB_ENV
        echo "RESOURCE_GROUP_NAME=${AZURE_RESOURCE_PREFIX}-${SERVICE_SHORT}-${CONFIG_SHORT}-rg" >> $GITHUB_ENV
        echo "STORAGE_ACCOUNT_NAME=${AZURE_RESOURCE_PREFIX}${SERVICE_SHORT}dbbkp${CONFIG_SHORT}sa" >> $GITHUB_ENV
        TODAY=$(date +"%F")
        echo "BACKUP_FILE=${SERVICE_SHORT}_${CONFIG_SHORT}_${TODAY}" >> $GITHUB_ENV
        echo "DB_SERVER=${AZURE_RESOURCE_PREFIX}-${SERVICE_SHORT}-${CONFIG_SHORT}-pg" >> $GITHUB_ENV

    - name: Set PTR variables
      if: ${{ github.event.inputs.PTRdatabase == 'true' }}
      run: |
        echo "PTR_DB_SERVER=${{ env.DB_SERVER }}-ptr" >> $GITHUB_ENV
        echo "BACKUP_FILE=${{ env.BACKUP_FILE }}-ptr" >> $GITHUB_ENV

    - name: Backup ${{ env.DEPLOY_ENV }} postgres
      uses: DFE-Digital/github-actions/backup-postgres@master
      with:
        storage-account: ${{ env.STORAGE_ACCOUNT_NAME }}
        resource-group: ${{ env.RESOURCE_GROUP_NAME }}
        app-name: ${{ env.SERVICE_NAME }}-${{ env.DEPLOY_ENV }}
        cluster: ${{ env.CLUSTER }}
        azure-credentials: ${{ secrets.AZURE_CREDENTIALS }}
        backup-file: ${{ env.BACKUP_FILE }}.sql
        ptr-db-server-name: ${{ env.PTR_DB_SERVER }}
